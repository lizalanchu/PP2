#include <mpi.h>        // Подключение библиотеки MPI для параллельных вычислений
#include <iostream>     // Подключение библиотеки ввода/вывода

int main(int argc, char* argv[]) {
    // Инициализация MPI-окружения
    // MPI_Init должна быть вызвана перед любыми другими MPI-функциями
    MPI_Init(&argc, &argv);

    int rank;    // Ранг (идентификатор) текущего процесса
    int size;    // Общее количество процессов
    
    // Получаем ранг текущего процесса в коммуникаторе MPI_COMM_WORLD
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    
    // Получаем общее количество процессов в коммуникаторе MPI_COMM_WORLD
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Фаза отправки сообщений - каждый процесс отправляет свой ранг всем другим процессам
    for (int i = 0; i < size; i++) {
        if (i != rank) {  // Не отправляем сообщение самому себе
            // Отправка сообщения:
            // &rank - адрес данных для отправки (в данном случае - свой ранг)
            // 1 - количество элементов для отправки
            // MPI_INT - тип данных (целое число)
            // i - ранг процесса-получателя
            // 0 - тег сообщения (идентификатор типа сообщения)
            // MPI_COMM_WORLD - коммуникатор (группа процессов)
            MPI_Send(&rank, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
    }

    // Фаза приема сообщений - каждый процесс получает сообщения от всех других процессов
    for (int i = 0; i < size; i++) {
        if (i != rank) {  // Не ожидаем сообщений от самого себя
            int received_value;  // Буфер для приема данных
            
            // Прием сообщения:
            // &received_value - буфер для принятых данных
            // 1 - максимальное количество элементов для приема
            // MPI_INT - ожидаемый тип данных
            // i - ранг процесса-отправителя
            // 0 - ожидаемый тег сообщения
            // MPI_COMM_WORLD - коммуникатор
            // MPI_STATUS_IGNORE - игнорировать дополнительную информацию о сообщении
            MPI_Recv(&received_value, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            
            // Вывод полученного сообщения
            std::cout << "[" << rank << "]: receive message '" << received_value 
                      << "' from " << i << std::endl;
        }
    }

    // Завершение работы с MPI
    // Все MPI-функции должны быть завершены до вызова MPI_Finalize
    MPI_Finalize();
    
    return 0;  // Код успешного завершения программы
}