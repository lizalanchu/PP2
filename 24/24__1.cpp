#include <iostream>
#include <mpi.h>  // Основная библиотека MPI для параллельных вычислений
#include <cmath>  // Математические функции (хотя в данной программе не используется)

// Функция для вычисления части суммы, приближающей число π
double calculate_pi(int N, int rank, int size) {
    double h = 1.0 / N;  // Шаг интегрирования (ширина прямоугольника)
    double sum = 0.0;    // Локальная сумма для текущего процесса

    // Распределение работы между процессами:
    // Каждый процесс обрабатывает свою часть интервала [0,1]
    // Процессы берут точки с шагом равным количеству процессов
    for (int i = rank; i < N; i += size) {
        double x = h * (i + 0.5);  // Центральная точка текущего интервала
        sum += 4.0 / (1.0 + x * x);  // Добавляем значение функции в точке x
    }

    return sum * h;  // Умножаем сумму на ширину прямоугольника
}

int main(int argc, char** argv) {
    int rank, size;  // Идентификатор процесса и общее количество процессов
    int N;           // Количество разбиений интервала (точность вычисления)
    double local_sum, global_sum;  // Локальная и общая суммы

    // Инициализация MPI-окружения
    MPI_Init(&argc, &argv);
    // Получение номера текущего процесса (0, 1, 2, ...)
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    // Получение общего количества процессов
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Только процесс с рангом 0 запрашивает входные данные
    if (rank == 0) {
        std::cout << "Введите точность вычисления N: ";
        std::cin >> N;
        
        // Проверка корректности ввода (добавьте при необходимости)
    }

    // Широковещательная рассылка значения N всем процессам
    // Параметры MPI_Bcast:
    // &N - адрес данных для рассылки
    // 1 - количество элементов
    // MPI_INT - тип данных
    // 0 - ранг отправителя
    // MPI_COMM_WORLD - коммуникатор
    MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Каждый процесс вычисляет свою часть суммы
    local_sum = calculate_pi(N, rank, size);

    // Сбор и суммирование результатов на процессе 0
    // Параметры MPI_Reduce:
    // &local_sum - адрес локальных данных
    // &global_sum - адрес для результата
    // 1 - количество элементов
    // MPI_DOUBLE - тип данных
    // MPI_SUM - операция редукции (суммирование)
    // 0 - ранг получателя
    // MPI_COMM_WORLD - коммуникатор
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Только процесс 0 выводит окончательный результат
    if (rank == 0) {
        std::cout.precision(10);  // Установка точности вывода
        std::cout << "Приближенное значение π: " << global_sum << std::endl;
        std::cout << "Точное значение π:       " << 3.1415926535 << std::endl;
    }

    // Завершение работы с MPI
    MPI_Finalize();
    return 0;
}