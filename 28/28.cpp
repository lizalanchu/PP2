#include <mpi.h>       // Основная библиотека MPI
#include <iostream>    // Для ввода/вывода
#include <cmath>       // Математические функции (хотя в данном коде не используется)

int main(int argc, char** argv) {
    // Объявление переменных:
    int rank, size;    // rank - номер текущего процесса, size - общее количество процессов
    int N = 0;         // Количество итераций для вычисления π (точность)
    double pi = 0.0;   // Итоговое значение π
    double local_pi = 0.0; // Частичная сумма на каждом процессе

    // Инициализация MPI
    MPI_Init(&argc, &argv);
    // Получение номера текущего процесса
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    // Получение общего количества процессов
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Процесс с рангом 0 запрашивает точность вычисления
    if (rank == 0) {
        std::cout << "Введите точность вычисления (N): ";
        std::cin >> N;
        // Проверка корректности ввода
        if (N <= 0) {
            std::cerr << "Ошибка: N должно быть положительным числом." << std::endl;
            MPI_Abort(MPI_COMM_WORLD, 1); // Аварийное завершение всех процессов
        }
    }

    // Создание "окна" для односторонних коммуникаций (RMA)
    MPI_Win win;          // Оконный объект
    double* window;       // Указатель на область памяти окна
    // Выделение памяти для окна (каждый процесс выделяет 1 double)
    MPI_Win_allocate(sizeof(double), sizeof(double), MPI_INFO_NULL, 
                    MPI_COMM_WORLD, &window, &win);

    // Процесс 0 рассылает значение N всем процессам через RMA
    if (rank == 0) {
        for (int i = 1; i < size; i++) {
            // Односторонняя операция записи (MPI_Put)
            MPI_Put(&N,         // Источник данных
                    1,          // Количество элементов
                    MPI_INT,    // Тип данных
                    i,          // Ранг процесса-получателя
                    0,          // Смещение в окне получателя
                    1,          // Количество элементов для записи
                    MPI_INT,    // Тип данных
                    win);      // Оконный объект
        }
    }

    // Синхронизация (барьер) для завершения операций RMA
    MPI_Win_fence(0, win);

    // Вычисление локальной части π (метод прямоугольников)
    int local_N = N / size;  // Количество итераций на процесс
    int start = rank * local_N;  // Начальный индекс
    // Конечный индекс (для последнего процесса учитываем остаток)
    int end = (rank == size - 1) ? N : start + local_N;

    for (int i = start; i < end; i++) {
        double x = (i + 0.5) / N;  // Середина интервала
        local_pi += 4.0 / (1.0 + x * x);  // Добавляем значение функции
    }
    local_pi /= N;  // Нормализация суммы

    // Отправка локального результата процессу 0 через RMA
    MPI_Put(&local_pi, 1, MPI_DOUBLE, 0, rank, 1, MPI_DOUBLE, win);

    // Синхронизация для завершения операций записи
    MPI_Win_fence(0, win);

    // Процесс 0 собирает и выводит результат
    if (rank == 0) {
        for (int i = 0; i < size; i++) {
            pi += window[i];  // Суммирование всех частичных результатов
        }
        std::cout << "Calculated pi: " << pi << std::endl;
    }

    // Освобождение ресурсов окна
    MPI_Win_free(&win);

    // Завершение работы MPI
    MPI_Finalize();
    return 0;
}